# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q_GwCGCwVBP-roDWBSSSik5zaNUo6P7Z
"""

import streamlit as st
import pickle
import numpy as np

# Load the trained model
model = pickle.load(open("salary_model.pkl", "rb"))
import streamlit as st
import base64
import urllib.request
image_url = "https://github.com/Aswin337/sal_project/raw/main/1000057793.jpg"
urllib.request.urlretrieve(image_url, "1000057793.jpg")
def add_bg_from_local(image_file):
    with open(image_file, "rb") as file:
        encoded = base64.b64encode(file.read()).decode()
    st.markdown(
         f"""
         <style>
         .stApp {{
             background-image: url("data:image/jpg;base64,{encoded}");
             background-size: cover;
             background-attachment: fixed;
         }}
         </style>
         """,
         unsafe_allow_html=True
     )

add_bg_from_local('1000057793.jpg')  # ✅ Change to your image filename
st.markdown(
    """
    <audio autoplay loop>
        <source src="https://raw.githubusercontent.com/Aswin337/sal_project/main/Ra%20Ra%20Rakkamma.mp3
" type="audio/mpeg">
        Your browser does not support the audio element.
    </audio>
    """,
    unsafe_allow_html=True
)

st.title("Salary Prediction App")

# Input fields
age = st.number_input("Age", min_value=18, max_value=65, step=1)
gender = st.selectbox("Gender", ["Male", "Female"])
education = st.selectbox("Education Level", ["Bachelor's", "Master's", "PhD"])
job = st.text_input("Job Title")
experience = st.number_input("Years of Experience", min_value=0, max_value=40, step=1)

# Encode inputs manually (same as training)
gender_map = {"Male": 1, "Female": 0}
education_map = {"Bachelor's": 0, "Master's": 1, "PhD": 2}
# Job encoding should ideally match training encoding — here we assume a fixed one for demo

# You can replace this mapping based on your training data's LabelEncoder classes
job_map = {
    "Software Engineer": 0,
    "Data Analyst": 1,
    "Senior Manager": 2,
    "Sales Associate": 3,
    "Director": 4
}
job_encoded = job_map.get(job, 0)  # Default to 0 if job not found

if st.button("Predict Salary"):
    features = np.array([[age, gender_map[gender], education_map[education], job_encoded, experience]])
    prediction = model.predict(features)
    st.success(f"Predicted Salary: ₹{prediction[0]:,.2f}")
